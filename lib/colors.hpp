// Copyright (C) by Josh Blum. See LICENSE.txt for licensing information.

#ifndef INCLUDED_LIBGRAS_COLORS_HPP
#define INCLUDED_LIBGRAS_COLORS_HPP

#include <cstdlib>
#include <string>
#include <boost/format.hpp>

struct rgb_t
{
    rgb_t(unsigned red, unsigned green, unsigned blue):
        red(red), green(green), blue(blue){}
    unsigned red, green, blue;
};

static inline rgb_t fraction_to_color_struct(const double frac)
{
    static const rgb_t colors[] = {rgb_t(3, 5, 106), rgb_t(0, 1, 138), rgb_t(0, 2, 140), rgb_t(0, 3, 146), rgb_t(0, 1, 152), rgb_t(0, 0, 156), rgb_t(1, 0, 158), rgb_t(1, 0, 162), rgb_t(0, 0, 167), rgb_t(0, 0, 169), rgb_t(0, 0, 171), rgb_t(0, 0, 174), rgb_t(0, 0, 176), rgb_t(0, 1, 180), rgb_t(1, 1, 185), rgb_t(1, 0, 189), rgb_t(1, 1, 195), rgb_t(1, 0, 198), rgb_t(0, 0, 202), rgb_t(0, 1, 207), rgb_t(0, 0, 208), rgb_t(1, 1, 211), rgb_t(1, 1, 213), rgb_t(0, 1, 216), rgb_t(0, 1, 220), rgb_t(0, 0, 222), rgb_t(0, 0, 223), rgb_t(1, 0, 228), rgb_t(1, 0, 232), rgb_t(2, 0, 236), rgb_t(2, 0, 240), rgb_t(2, 0, 243), rgb_t(0, 0, 245), rgb_t(1, 1, 249), rgb_t(1, 2, 252), rgb_t(0, 1, 252), rgb_t(0, 1, 251), rgb_t(0, 4, 253), rgb_t(0, 9, 255), rgb_t(4, 16, 255), rgb_t(0, 16, 251), rgb_t(0, 21, 253), rgb_t(0, 27, 255), rgb_t(3, 32, 255), rgb_t(0, 31, 254), rgb_t(0, 30, 251), rgb_t(0, 35, 253), rgb_t(2, 43, 255), rgb_t(2, 46, 255), rgb_t(1, 49, 255), rgb_t(0, 47, 250), rgb_t(0, 51, 250), rgb_t(2, 60, 255), rgb_t(4, 62, 255), rgb_t(0, 60, 254), rgb_t(0, 62, 253), rgb_t(0, 65, 249), rgb_t(4, 79, 255), rgb_t(0, 76, 254), rgb_t(0, 80, 255), rgb_t(0, 80, 252), rgb_t(0, 78, 247), rgb_t(5, 94, 255), rgb_t(0, 93, 255), rgb_t(0, 97, 255), rgb_t(0, 97, 252), rgb_t(0, 101, 254), rgb_t(0, 110, 255), rgb_t(0, 112, 255), rgb_t(0, 111, 254), rgb_t(0, 115, 255), rgb_t(3, 123, 255), rgb_t(0, 127, 255), rgb_t(0, 130, 255), rgb_t(0, 128, 251), rgb_t(0, 131, 251), rgb_t(1, 140, 255), rgb_t(2, 143, 255), rgb_t(0, 141, 253), rgb_t(0, 144, 252), rgb_t(0, 145, 250), rgb_t(3, 159, 255), rgb_t(0, 156, 255), rgb_t(0, 161, 254), rgb_t(0, 161, 251), rgb_t(0, 158, 248), rgb_t(5, 173, 255), rgb_t(2, 172, 255), rgb_t(1, 176, 255), rgb_t(0, 175, 255), rgb_t(0, 180, 255), rgb_t(3, 187, 255), rgb_t(4, 191, 255), rgb_t(2, 191, 255), rgb_t(0, 192, 254), rgb_t(0, 194, 251), rgb_t(5, 206, 255), rgb_t(3, 209, 255), rgb_t(0, 208, 253), rgb_t(0, 212, 251), rgb_t(3, 221, 255), rgb_t(4, 224, 255), rgb_t(0, 222, 255), rgb_t(0, 224, 254), rgb_t(0, 225, 248), rgb_t(6, 238, 255), rgb_t(0, 235, 252), rgb_t(0, 240, 255), rgb_t(0, 240, 252), rgb_t(0, 239, 248), rgb_t(5, 254, 255), rgb_t(1, 253, 255), rgb_t(1, 255, 255), rgb_t(2, 255, 254), rgb_t(4, 255, 254), rgb_t(9, 255, 255), rgb_t(12, 255, 255), rgb_t(13, 255, 255), rgb_t(13, 255, 252), rgb_t(18, 255, 249), rgb_t(28, 255, 244), rgb_t(30, 255, 239), rgb_t(31, 254, 236), rgb_t(32, 253, 235), rgb_t(36, 253, 232), rgb_t(41, 255, 231), rgb_t(46, 255, 226), rgb_t(50, 255, 222), rgb_t(52, 254, 216), rgb_t(55, 254, 213), rgb_t(62, 255, 210), rgb_t(64, 254, 206), rgb_t(67, 253, 203), rgb_t(69, 253, 199), rgb_t(72, 255, 199), rgb_t(74, 255, 197), rgb_t(78, 254, 190), rgb_t(81, 255, 186), rgb_t(84, 255, 185), rgb_t(89, 255, 186), rgb_t(91, 255, 183), rgb_t(94, 255, 180), rgb_t(97, 254, 173), rgb_t(100, 254, 168), rgb_t(107, 255, 166), rgb_t(110, 255, 162), rgb_t(112, 254, 156), rgb_t(114, 253, 152), rgb_t(118, 253, 150), rgb_t(122, 255, 148), rgb_t(124, 255, 147), rgb_t(129, 255, 145), rgb_t(134, 253, 135), rgb_t(138, 254, 131), rgb_t(141, 255, 131), rgb_t(144, 254, 129), rgb_t(145, 254, 125), rgb_t(148, 254, 122), rgb_t(153, 255, 119), rgb_t(157, 255, 114), rgb_t(159, 254, 108), rgb_t(162, 255, 105), rgb_t(166, 255, 101), rgb_t(171, 255, 100), rgb_t(173, 255, 97), rgb_t(175, 255, 94), rgb_t(175, 255, 91), rgb_t(179, 255, 87), rgb_t(189, 255, 81), rgb_t(192, 255, 78), rgb_t(191, 254, 75), rgb_t(191, 255, 73), rgb_t(194, 255, 72), rgb_t(198, 255, 73), rgb_t(202, 255, 70), rgb_t(206, 255, 66), rgb_t(208, 254, 59), rgb_t(213, 255, 55), rgb_t(218, 255, 51), rgb_t(223, 255, 47), rgb_t(228, 254, 41), rgb_t(231, 255, 39), rgb_t(234, 255, 38), rgb_t(237, 255, 36), rgb_t(237, 255, 31), rgb_t(239, 255, 28), rgb_t(244, 255, 28), rgb_t(252, 255, 26), rgb_t(255, 255, 22), rgb_t(255, 254, 18), rgb_t(255, 254, 12), rgb_t(255, 255, 8), rgb_t(255, 254, 4), rgb_t(255, 254, 3), rgb_t(255, 255, 4), rgb_t(255, 255, 5), rgb_t(255, 252, 3), rgb_t(254, 244, 0), rgb_t(254, 239, 0), rgb_t(255, 240, 2), rgb_t(255, 237, 2), rgb_t(255, 238, 5), rgb_t(247, 223, 0), rgb_t(252, 225, 0), rgb_t(254, 225, 0), rgb_t(254, 220, 0), rgb_t(255, 222, 5), rgb_t(252, 208, 0), rgb_t(254, 208, 0), rgb_t(255, 208, 5), rgb_t(255, 203, 4), rgb_t(254, 196, 0), rgb_t(251, 191, 0), rgb_t(253, 190, 0), rgb_t(255, 191, 3), rgb_t(255, 188, 4), rgb_t(253, 176, 0), rgb_t(255, 175, 0), rgb_t(255, 175, 3), rgb_t(255, 176, 4), rgb_t(255, 172, 3), rgb_t(253, 164, 0), rgb_t(252, 160, 0), rgb_t(255, 160, 3), rgb_t(255, 157, 2), rgb_t(255, 157, 6), rgb_t(248, 142, 0), rgb_t(254, 143, 0), rgb_t(255, 143, 2), rgb_t(255, 139, 0), rgb_t(255, 142, 6), rgb_t(250, 129, 0), rgb_t(255, 128, 0), rgb_t(255, 126, 0), rgb_t(255, 127, 3), rgb_t(255, 124, 1), rgb_t(251, 115, 0), rgb_t(252, 111, 0), rgb_t(255, 111, 0), rgb_t(255, 108, 3), rgb_t(251, 98, 0), rgb_t(254, 96, 0), rgb_t(255, 95, 2), rgb_t(255, 95, 5), rgb_t(255, 91, 3), rgb_t(254, 84, 0), rgb_t(252, 80, 0), rgb_t(255, 81, 2), rgb_t(255, 78, 2), rgb_t(255, 79, 5), rgb_t(246, 63, 0), rgb_t(250, 66, 0), rgb_t(253, 66, 0), rgb_t(253, 61, 0), rgb_t(255, 63, 3), rgb_t(250, 49, 0), rgb_t(254, 48, 0), rgb_t(255, 45, 0), rgb_t(255, 46, 2), rgb_t(255, 43, 2), rgb_t(253, 34, 0), rgb_t(253, 31, 0), rgb_t(255, 31, 0), rgb_t(255, 29, 0), rgb_t(255, 27, 5), rgb_t(254, 19, 0), rgb_t(252, 15, 0), rgb_t(255, 15, 1), rgb_t(255, 13, 2), rgb_t(252, 6, 0), rgb_t(250, 2, 0), rgb_t(254, 3, 0), rgb_t(252, 3, 0), rgb_t(249, 1, 0), rgb_t(244, 0, 0), rgb_t(241, 0, 0), rgb_t(239, 0, 0), rgb_t(236, 0, 0), rgb_t(234, 0, 1), rgb_t(230, 0, 0), rgb_t(223, 0, 0), rgb_t(221, 1, 1), rgb_t(220, 2, 3), rgb_t(216, 0, 1), rgb_t(213, 0, 0), rgb_t(208, 0, 0), rgb_t(205, 0, 0), rgb_t(204, 2, 2), rgb_t(200, 2, 3), rgb_t(193, 0, 0), rgb_t(188, 0, 0), rgb_t(187, 2, 0), rgb_t(186, 2, 2), rgb_t(180, 0, 0), rgb_t(177, 0, 0), rgb_t(178, 0, 0), rgb_t(177, 0, 0), rgb_t(174, 0, 2), rgb_t(162, 3, 0), rgb_t(152, 3, 0), rgb_t(151, 4, 0), rgb_t(156, 5, 0), rgb_t(158, 0, 0), rgb_t(152, 0, 0), rgb_t(143, 0, 2), rgb_t(126, 7, 9), rgb_t(104, 20, 20)};
    const size_t len = sizeof(colors)/sizeof(*colors);
    if (frac < 0) return colors[0];
    if (frac >= len) return colors[len-1];
    const size_t index = size_t((frac * (len-1)) + 0.5);
    return colors[index];
}

static inline std::string fraction_to_color_string(const double frac)
{
    const rgb_t color = fraction_to_color_struct(frac);
    return str(boost::format("#%2x%2x%2x") % color.red % color.green % color.blue);
}

#endif /*INCLUDED_LIBGRAS_COLORS_HPP*/
